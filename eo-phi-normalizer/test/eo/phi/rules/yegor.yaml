title: "Rule set based on Yegor's draft"
rules:
  - name: Rule 1
    description: 'Initialization of vertex attribute'
    context:
      global_object: '!Phi'
    pattern: |
      ⟦ !a ↦ ⟦ !B ⟧, !B_rest ⟧
    result: |
      ⟦ !a ↦ ⟦ !B, ν ↦ @T(!Phi) ⟧, !B_rest ⟧
    when:
      - absent_attrs:
          attrs: ['ν']
          bindings: ['!B']
      - not_equal: ['!a', 'ν']
    tests:
      - name: Adds vertex attribute
        input: '⟦ a ↦ ⟦ ⟧ ⟧'
        output: '⟦ a ↦ ⟦ ν ↦ ⟦ Δ ⤍ 00- ⟧ ⟧ ⟧'
        matches: true

  - name: Rule 3
    description: 'Initialization of parent attribute'
    pattern: |
      ⟦ !B ⟧
    result: |
      ⟦ !B, ρ ↦ ξ.σ ⟧
    when:
      - present_attrs:
          attrs: ["σ"]
          bindings: ["!B"]
      - absent_attrs:
          attrs: ["ρ"]
          bindings: ["!B"]
    tests:
      - name: 'Has sigma and no rho'
        input: '⟦ b ↦ ⟦ ⟧, σ ↦ ⟦ ⟧ ⟧ '
        output: '⟦ b ↦ ⟦ ⟧, σ ↦ ⟦ ⟧, ρ ↦ ξ.σ ⟧'
        matches: true
      - name: 'Has both sigma and rho'
        input: '⟦ a ↦ ⟦ b ↦ ⟦ ⟧, ρ ↦ ⟦ ⟧, σ ↦ ⟦ ⟧ ⟧ ⟧'
        output: '⟦ a ↦ ⟦ b ↦ ⟦ ⟧, ρ ↦ ⟦ ⟧, σ ↦ ⟦ ⟧ ⟧ ⟧'
        matches: false
      - name: 'Has neither sigma nor rho'
        input: '⟦ a ↦ ⟦ b ↦ ⟦ ⟧ ⟧ ⟧'
        output: '⟦ a ↦ ⟦ b ↦ ⟦ ⟧ ⟧ ⟧'
        matches: false

  - name: Rule 4
    description: 'Φ-dispatch'
    context:
      global_object: ⟦ !B ⟧
    pattern: |
      Φ.!a
    result: |
      ⟦ σ ↦ Φ, !B ⟧.!a
    when: []
    tests: []

  - name: Rule 5
    description: "ξ-dispatch"
    context:
      current_object: ⟦ !a ↦ ξ.!b, !B ⟧
    pattern: |
      ξ
    result: |
      ⟦ !B ⟧
    when: []
    tests: []

  - name: Rule 6
    description: "Accessing an α-binding"
    pattern: |
      ⟦ !a ↦ !n, !B ⟧.!a
    result: |
      !n(ρ ↦ ⟦ !B ⟧)
    when:
      - nf: ["!n"]
    tests:
      - name: Should match
        input: ⟦ hello ↦ ⟦⟧ ⟧.hello
        output: ⟦⟧(ρ ↦ ⟦⟧)
        matches: true
      - name: Shouldn't match
        input: ⟦ ⟧.hello
        output: ""
        matches: false

  - name: Rule 7
    description: "Application"
    pattern: |
      ⟦ !a ↦ ∅, !B ⟧(!a ↦ !n)
    result: |
      ⟦ !a ↦ !n, !B ⟧
    when:
      - nf: ["!n"]
    tests: []

  - name: Rule 8
    description: 'Accessing a decorated object'
    pattern: |
      ⟦ φ ↦ !n, !B ⟧.!a
    result: |
      !n.!a
    when:
      - nf: ["!n"]
      - absent_attrs:
          attrs: ["!a"]
          bindings: ["!B"]
    tests:
      - name: 'Attribute does not exist'
        input: '⟦ φ ↦ ⟦ ⟧, a ↦ ⟦ ⟧ ⟧.b'
        output: '⟦ ⟧.b'
        matches: true
      - name: 'Attribute exists'
        input: '⟦ φ ↦ ⟦ ⟧, a ↦ ⟦ ⟧ ⟧.a'
        output: '⟦ φ ↦ ⟦ ⟧, a ↦ ⟦ ⟧ ⟧.a'
        matches: false

  - name: Rule 9
    description: "Parent application"
    pattern: ⟦ ρ ↦ !t, !B ⟧(ρ ↦ !n)
    result: ⟦ ρ ↦ !n, !B ⟧
    when:
      - nf: ["!n"]
    tests: []

  - name: Rule 10
    description: 'Invalid application'
    pattern: ⟦ !t ↦ !b1, !B1 ⟧(!t ↦ !b2, !B2)
    result: ⊥
    when:
      - not_equal: ["!t", "ρ"]
    tests:
      - name: ''
        input: '⟦ t ↦ ⟦ a ↦ ∅ ⟧ ⟧(t ↦ ⟦ b ↦ ∅ ⟧)'
        output: '⊥'
        matches: true

  - name: Rule 11
    description: 'Invalid attribute access'
    pattern: |
      ⟦ !B ⟧.!a
    result: |
      ⊥
    when:
      - absent_attrs:
          attrs: ["!a", "φ", "λ"]
          bindings: ["!B"]
      - present_attrs:
          attrs: ["ρ", "σ"]
          bindings: ["!B"]
    tests:
      - name: 'Accessing nonexistent attribute'
        input: '⟦ ρ ↦ ⟦ ⟧, σ ↦ ⟦ ⟧ ⟧.x'
        output: '⊥'
        matches: true

  - name: Rule 12
    description: 'Accessing an attribute on bottom'
    pattern: |
      ⊥.!a
    result: |
      ⊥
    when: []
    tests:
      - name: 'Dispatch on bottom is bottom'
        input: '⊥.a'
        output: '⊥'
        matches: true
      - name: 'Dispatch on anything else is not touched'
        input: '⟦ ⟧.a'
        output: '⟦ ⟧.a'
        matches: false
