title: "Rule set based on Yegor's draft"
rules:
  - name: Rule 1
    description: 'Initialization of vertex attribute'
    context:
      global_object: '!Phi'
      current_attribute: '!a'
    pattern: |
      ⟦ !B ⟧
    result: |
      ⟦ !B, ν ↦ @T(!Phi) ⟧
    when:
      - absent_attrs:
          attrs: ['ν']
          bindings: ['!B']
      - not_equal: ['!a', 'ν']
    tests:
      - name: Adds vertex attribute
        input: '⟦ a ↦ ⟦ ⟧ ⟧'
        output: ['⟦ a ↦ ⟦ ν ↦ ⟦ Δ ⤍ 00- ⟧ ⟧ ⟧']
      - name: Adds vertices in all non-top-level formations
        input: '⟦ a ↦ ⟦ ⟧, b ↦ ⟦ ⟧ ⟧'
        output:
          - '⟦ a ↦ ⟦ ν ↦ ⟦ Δ ⤍ 00- ⟧ ⟧, b ↦ ⟦ ⟧ ⟧'
          - '⟦ a ↦ ⟦ ⟧, b ↦ ⟦ ν ↦ ⟦ Δ ⤍ 00- ⟧ ⟧ ⟧'
      - name: Added vertices are incremental (1)
        input: '⟦ a ↦ ⟦ ν ↦ ⟦ Δ ⤍ 03- ⟧ ⟧, b ↦ ⟦ ⟧ ⟧'
        output: ['⟦ a ↦ ⟦ ν ↦ ⟦ Δ ⤍ 03- ⟧ ⟧, b ↦ ⟦ ν ↦ ⟦ Δ ⤍ 04- ⟧ ⟧ ⟧']
      - name: Added vertices are incremental (2)
        input: '⟦ a ↦ ⟦ ⟧(ν ↦ ⟦ Δ ⤍ 06- ⟧), b ↦ ⟦ ν ↦ ⟦ Δ ⤍ 05- ⟧ ⟧, c ↦ ⟦ ⟧ ⟧'
        output:
          - '⟦ a ↦ ⟦ ⟧(ν ↦ ⟦ Δ ⤍ 06- ⟧), b ↦ ⟦ ν ↦ ⟦ Δ ⤍ 05- ⟧ ⟧, c ↦ ⟦ ν ↦ ⟦ Δ ⤍ 07- ⟧ ⟧ ⟧'

  - name: Rule 2
    description: ''
    context:
      current_attribute: '!a'
    pattern: |
      ⟦ !b ↦ ⟦ !B1 ⟧, σ ↦ !obj, !B2 ⟧
    result: |
      ⟦ !b ↦ ⟦ σ ↦ !obj.!a, !B1 ⟧, σ ↦ !obj, !B2 ⟧
    when:
      - absent_attrs:
          attrs: ['σ']
          bindings: ['!B1']
    tests:
      - name: 'Adds home attribute'
        input: '⟦ a ↦ ⟦ b ↦ ⟦ ⟧, σ ↦ ⟦ ⟧ ⟧ ⟧'
        output: ['⟦ a ↦ ⟦ b ↦ ⟦ σ ↦ ⟦ ⟧.a ⟧, σ ↦ ⟦ ⟧ ⟧ ⟧']
      - name: 'Leaves the object unchanged'
        input: '⟦ a ↦ ⟦ b ↦ ⟦ σ ↦ ⟦ ⟧ ⟧ ⟧ ⟧'
        output: []

  - name: Rule 3
    description: 'Initialization of parent attribute'
    pattern: |
      ⟦ !B ⟧
    result: |
      ⟦ !B, ρ ↦ ξ.σ ⟧
    when:
      - present_attrs:
          attrs: ['σ']
          bindings: ['!B']
      - absent_attrs:
          attrs: ['ρ']
          bindings: ['!B']
    tests:
      - name: 'Has sigma and no rho'
        input: '⟦ b ↦ ⟦ ⟧, σ ↦ ⟦ ⟧ ⟧ '
        output: ['⟦ b ↦ ⟦ ⟧, σ ↦ ⟦ ⟧, ρ ↦ ξ.σ ⟧']
      - name: 'Has both sigma and rho'
        input: '⟦ a ↦ ⟦ b ↦ ⟦ ⟧, ρ ↦ ⟦ ⟧, σ ↦ ⟦ ⟧ ⟧ ⟧'
        output: []
      - name: 'Has neither sigma nor rho'
        input: '⟦ a ↦ ⟦ b ↦ ⟦ ⟧ ⟧ ⟧'
        output: []

  - name: Rule 4
    description: 'Φ-dispatch'
    context:
      global_object: ⟦ !B ⟧
    pattern: |
      Φ.!a
    result: |
      ⟦ σ ↦ Φ, !B ⟧.!a
    when: []
    tests: []

  - name: Rule 5
    description: 'ξ-dispatch'
    pattern: |
      ⟦ !a ↦ ξ.!b, !B ⟧
    result: |
      ⟦ !a ↦ ⟦ !B ⟧.!b, !B ⟧
    when: []
    tests:
      - name: Replaces ξ with the actual object
        input: '⟦ a ↦ ⟦ ⟧, x ↦ ξ.a, b ↦ ⟦ ⟧ ⟧'
        output: ['⟦ a ↦ ⟦ ⟧, x ↦ ⟦ a ↦ ⟦ ⟧, b ↦ ⟦ ⟧ ⟧.a, b ↦ ⟦ ⟧ ⟧']

  - name: Rule 6
    description: 'Accessing an α-binding'
    pattern: |
      ⟦ !a ↦ !n, !B ⟧.!a
    result: |
      !n(ρ ↦ ⟦ !B ⟧)
    when:
      - nf: '!n'
    tests:
      - name: Should match
        input: ⟦ hello ↦ ⟦⟧ ⟧.hello
        output: ['⟦⟧(ρ ↦ ⟦⟧)']
      - name: Shouldn't match
        input: ⟦ ⟧.hello
        output: []

  - name: Rule 7
    description: 'Application'
    pattern: |
      ⟦ !a ↦ ∅, !B ⟧(!a ↦ !n)
    result: |
      ⟦ !a ↦ !n, !B ⟧
    when:
      - nf: '!n'
    tests: []

  - name: Rule 8
    description: 'Accessing a decorated object'
    pattern: |
      ⟦ φ ↦ !n, !B ⟧.!a
    result: |
      !n.!a
    when:
      - nf: '!n'
      - absent_attrs:
          attrs: ['!a']
          bindings: ['!B']
    tests:
      - name: 'Attribute does not exist'
        input: '⟦ φ ↦ ⟦ ⟧, a ↦ ⟦ ⟧ ⟧.b'
        output: ['⟦ ⟧.b']
      - name: 'Attribute exists'
        input: '⟦ φ ↦ ⟦ ⟧, a ↦ ⟦ ⟧ ⟧.a'
        output: []

  - name: Rule 9
    description: 'Parent application'
    pattern: ⟦ ρ ↦ !t, !B ⟧(ρ ↦ !n)
    result: ⟦ ρ ↦ !n, !B ⟧
    when:
      - nf: '!n'
    tests: []

  - name: Rule 10
    description: 'Invalid application'
    pattern: ⟦ !t ↦ !b1, !B1 ⟧(!t ↦ !b2, !B2)
    result: ⊥
    when:
      - not_equal: ['!t', 'ρ']
    tests:
      - name: ''
        input: '⟦ t ↦ ⟦ a ↦ ∅ ⟧ ⟧(t ↦ ⟦ b ↦ ∅ ⟧)'
        output: ['⊥']

  - name: Rule 11
    description: 'Invalid attribute access'
    pattern: |
      ⟦ !B ⟧.!a
    result: |
      ⊥
    when:
      - absent_attrs:
          attrs: ['!a', 'φ', 'λ']
          bindings: ['!B']
      - present_attrs:
          attrs: ['ρ', 'σ']
          bindings: ['!B']
      - nf: '⟦ !B ⟧'
    tests:
      - name: 'Accessing nonexistent attribute'
        input: '⟦ ρ ↦ ⟦ ⟧, σ ↦ ⟦ ⟧ ⟧.x'
        output: ['⊥']

  - name: Rule 12
    description: 'Accessing an attribute on bottom'
    pattern: |
      ⊥.!a
    result: |
      ⊥
    when: []
    tests:
      - name: 'Dispatch on bottom is bottom'
        input: '⊥.a'
        output: ['⊥']
      - name: 'Dispatch on anything else is not touched'
        input: '⟦ ⟧.a'
        output: []

  - name: Extra rule for bottom
    description: 'Application on bottom is bottom'
    pattern: |
      ⊥(!B)
    result: |
      ⊥
    when: []
    tests: []
