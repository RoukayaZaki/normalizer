-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Language.EO.Phi.Syntax.Par
  ( happyError
  , myLexer
  , pProgram
  , pObject
  , pBinding
  , pListBinding
  , pAttribute
  ) where

import Prelude

import qualified Language.EO.Phi.Syntax.Abs
import Language.EO.Phi.Syntax.Lex

}

%name pProgram Program
%name pObject Object
%name pBinding Binding
%name pListBinding ListBinding
%name pAttribute Attribute
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  ','          { PT _ (TS _ 1)          }
  '.'          { PT _ (TS _ 2)          }
  '{'          { PT _ (TS _ 3)          }
  '}'          { PT _ (TS _ 4)          }
  'Δ'          { PT _ (TS _ 5)          }
  'Φ'          { PT _ (TS _ 6)          }
  'λ'          { PT _ (TS _ 7)          }
  'ν'          { PT _ (TS _ 8)          }
  'ξ'          { PT _ (TS _ 9)          }
  'ρ'          { PT _ (TS _ 10)         }
  'σ'          { PT _ (TS _ 11)         }
  'φ'          { PT _ (TS _ 12)         }
  '↦'          { PT _ (TS _ 13)         }
  '∅'          { PT _ (TS _ 14)         }
  '⊥'          { PT _ (TS _ 15)         }
  '⤍'          { PT _ (TS _ 16)         }
  L_Bytes      { PT _ (T_Bytes $$)      }
  L_Function   { PT _ (T_Function $$)   }
  L_LabelId    { PT _ (T_LabelId $$)    }
  L_AlphaIndex { PT _ (T_AlphaIndex $$) }

%%

Bytes :: { Language.EO.Phi.Syntax.Abs.Bytes }
Bytes  : L_Bytes { Language.EO.Phi.Syntax.Abs.Bytes $1 }

Function :: { Language.EO.Phi.Syntax.Abs.Function }
Function  : L_Function { Language.EO.Phi.Syntax.Abs.Function $1 }

LabelId :: { Language.EO.Phi.Syntax.Abs.LabelId }
LabelId  : L_LabelId { Language.EO.Phi.Syntax.Abs.LabelId $1 }

AlphaIndex :: { Language.EO.Phi.Syntax.Abs.AlphaIndex }
AlphaIndex  : L_AlphaIndex { Language.EO.Phi.Syntax.Abs.AlphaIndex $1 }

Program :: { Language.EO.Phi.Syntax.Abs.Program }
Program
  : '{' ListBinding '}' { Language.EO.Phi.Syntax.Abs.Program $2 }

Object :: { Language.EO.Phi.Syntax.Abs.Object }
Object
  : '{' ListBinding '}' { Language.EO.Phi.Syntax.Abs.Formation $2 }
  | Object '{' ListBinding '}' { Language.EO.Phi.Syntax.Abs.Application $1 $3 }
  | Object '.' Attribute { Language.EO.Phi.Syntax.Abs.ObjectDispatch $1 $3 }
  | 'Φ' '.' Attribute { Language.EO.Phi.Syntax.Abs.GlobalDispatch $3 }
  | 'ξ' '.' Attribute { Language.EO.Phi.Syntax.Abs.ThisDispatch $3 }
  | '⊥' { Language.EO.Phi.Syntax.Abs.Termination }

Binding :: { Language.EO.Phi.Syntax.Abs.Binding }
Binding
  : Attribute '↦' Object { Language.EO.Phi.Syntax.Abs.AlphaBinding $1 $3 }
  | Attribute '↦' '∅' { Language.EO.Phi.Syntax.Abs.EmptyBinding $1 }
  | 'Δ' '⤍' Bytes { Language.EO.Phi.Syntax.Abs.DeltaBinding $3 }
  | 'λ' '⤍' Function { Language.EO.Phi.Syntax.Abs.LambdaBinding $3 }

ListBinding :: { [Language.EO.Phi.Syntax.Abs.Binding] }
ListBinding
  : {- empty -} { [] }
  | Binding { (:[]) $1 }
  | Binding ',' ListBinding { (:) $1 $3 }

Attribute :: { Language.EO.Phi.Syntax.Abs.Attribute }
Attribute
  : 'φ' { Language.EO.Phi.Syntax.Abs.Phi }
  | 'ρ' { Language.EO.Phi.Syntax.Abs.Rho }
  | 'σ' { Language.EO.Phi.Syntax.Abs.Sigma }
  | 'ν' { Language.EO.Phi.Syntax.Abs.VTX }
  | LabelId { Language.EO.Phi.Syntax.Abs.Label $1 }
  | AlphaIndex { Language.EO.Phi.Syntax.Abs.Alpha $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

