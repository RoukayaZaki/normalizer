-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language Syntax.

module Language.EO.Phi.Syntax.Abs where

import Prelude (String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

import qualified Data.Data    as C (Data, Typeable)
import qualified GHC.Generics as C (Generic)

type Program = Program' BNFC'Position
data Program' a = Program a [Binding' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable, C.Data, C.Typeable, C.Generic)

type Object = Object' BNFC'Position
data Object' a
    = Formation a [Binding' a]
    | Application a (AbstractObject' a) [Binding' a] [Bindings' a]
    | Dispatch a (Dispatch' a)
    | Termination a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable, C.Data, C.Typeable, C.Generic)

type AbstractObject = AbstractObject' BNFC'Position
data AbstractObject' a
    = AbstractFormation a [Binding' a]
    | AbstractDispatch a (Dispatch' a)
    | AbstractTermination a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable, C.Data, C.Typeable, C.Generic)

type DispatchedObject = DispatchedObject' BNFC'Position
data DispatchedObject' a
    = DispatchedFormation a [Binding' a] | DispatchedTermination a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable, C.Data, C.Typeable, C.Generic)

type Binding = Binding' BNFC'Position
data Binding' a
    = AlphaBinding a (Attribute' a) (Object' a)
    | EmptyBinding a (Attribute' a)
    | DeltaBinding a Bytes
    | LambdaBinding a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable, C.Data, C.Typeable, C.Generic)

type Bindings = Bindings' BNFC'Position
data Bindings' a = Bindings a [Binding' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable, C.Data, C.Typeable, C.Generic)

type Dispatch = Dispatch' BNFC'Position
data Dispatch' a
    = ObjectDispatch a (DispatchedObject' a) [Bindings' a] [Attribute' a] [Disp' a]
    | HomeDispatch a [Attribute' a] [Disp' a]
    | ThisDispatch a [Attribute' a] [Disp' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable, C.Data, C.Typeable, C.Generic)

type Attribute = Attribute' BNFC'Position
data Attribute' a
    = Phi a
    | Rho a
    | Sigma a
    | VTX a
    | Label a LabelId
    | Alpha a AlphaIndex
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable, C.Data, C.Typeable, C.Generic)

type Disp = Disp' BNFC'Position
data Disp' a = Disp a [Binding' a] (Bindings' a) [Attribute' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable, C.Data, C.Typeable, C.Generic)

newtype Bytes = Bytes String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype Function = Function String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype LabelId = LabelId String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype AlphaIndex = AlphaIndex String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Program where
  hasPosition = \case
    Program p _ -> p

instance HasPosition Object where
  hasPosition = \case
    Formation p _ -> p
    Application p _ _ _ -> p
    Dispatch p _ -> p
    Termination p -> p

instance HasPosition AbstractObject where
  hasPosition = \case
    AbstractFormation p _ -> p
    AbstractDispatch p _ -> p
    AbstractTermination p -> p

instance HasPosition DispatchedObject where
  hasPosition = \case
    DispatchedFormation p _ -> p
    DispatchedTermination p -> p

instance HasPosition Binding where
  hasPosition = \case
    AlphaBinding p _ _ -> p
    EmptyBinding p _ -> p
    DeltaBinding p _ -> p
    LambdaBinding p -> p

instance HasPosition Bindings where
  hasPosition = \case
    Bindings p _ -> p

instance HasPosition Dispatch where
  hasPosition = \case
    ObjectDispatch p _ _ _ _ -> p
    HomeDispatch p _ _ -> p
    ThisDispatch p _ _ -> p

instance HasPosition Attribute where
  hasPosition = \case
    Phi p -> p
    Rho p -> p
    Sigma p -> p
    VTX p -> p
    Label p _ -> p
    Alpha p _ -> p

instance HasPosition Disp where
  hasPosition = \case
    Disp p _ _ _ -> p

