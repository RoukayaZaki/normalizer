-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Language.EO.Phi.Syntax.Par
  ( happyError
  , myLexer
  , pProgram
  , pObject
  , pAbstractObject
  , pDispatchedObject
  , pBinding
  , pListBinding
  , pBindings
  , pListBindings
  , pDispatch
  , pAttribute
  , pListAttribute
  , pDisp
  , pListDisp
  ) where

import Prelude

import qualified Language.EO.Phi.Syntax.Abs
import Language.EO.Phi.Syntax.Lex

}

%name pProgram_internal Program
%name pObject_internal Object
%name pAbstractObject_internal AbstractObject
%name pDispatchedObject_internal DispatchedObject
%name pBinding_internal Binding
%name pListBinding_internal ListBinding
%name pBindings_internal Bindings
%name pListBindings_internal ListBindings
%name pDispatch_internal Dispatch
%name pAttribute_internal Attribute
%name pListAttribute_internal ListAttribute
%name pDisp_internal Disp
%name pListDisp_internal ListDisp
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  ','          { PT _ (TS _ 1)         }
  '.'          { PT _ (TS _ 2)         }
  '{'          { PT _ (TS _ 3)         }
  '}'          { PT _ (TS _ 4)         }
  'Δ'          { PT _ (TS _ 5)         }
  'Φ'          { PT _ (TS _ 6)         }
  'λ'          { PT _ (TS _ 7)         }
  'ν'          { PT _ (TS _ 8)         }
  'ξ'          { PT _ (TS _ 9)         }
  'ρ'          { PT _ (TS _ 10)        }
  'σ'          { PT _ (TS _ 11)        }
  'φ'          { PT _ (TS _ 12)        }
  '↦'          { PT _ (TS _ 13)        }
  '∅'          { PT _ (TS _ 14)        }
  '⊥'          { PT _ (TS _ 15)        }
  '⤍'          { PT _ (TS _ 16)        }
  L_Bytes      { PT _ (T_Bytes _)      }
  L_Function   { PT _ (T_Function _)   }
  L_LabelId    { PT _ (T_LabelId _)    }
  L_AlphaIndex { PT _ (T_AlphaIndex _) }

%%

Bytes :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, Language.EO.Phi.Syntax.Abs.Bytes) }
Bytes  : L_Bytes { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.Bytes (tokenText $1)) }

Function :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, Language.EO.Phi.Syntax.Abs.Function) }
Function  : L_Function { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.Function (tokenText $1)) }

LabelId :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, Language.EO.Phi.Syntax.Abs.LabelId) }
LabelId  : L_LabelId { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.LabelId (tokenText $1)) }

AlphaIndex :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, Language.EO.Phi.Syntax.Abs.AlphaIndex) }
AlphaIndex  : L_AlphaIndex { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.AlphaIndex (tokenText $1)) }

Program :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, Language.EO.Phi.Syntax.Abs.Program) }
Program
  : '{' ListBinding '}' { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.Program (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

Object :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, Language.EO.Phi.Syntax.Abs.Object) }
Object
  : '{' ListBinding '}' { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.Formation (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | AbstractObject '{' ListBinding '}' ListBindings { (fst $1, Language.EO.Phi.Syntax.Abs.Application (fst $1) (snd $1) (snd $3) (snd $5)) }
  | Dispatch { (fst $1, Language.EO.Phi.Syntax.Abs.Dispatch (fst $1) (snd $1)) }
  | '⊥' { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.Termination (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1))) }

AbstractObject :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, Language.EO.Phi.Syntax.Abs.AbstractObject) }
AbstractObject
  : '{' ListBinding '}' { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.AbstractFormation (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Dispatch { (fst $1, Language.EO.Phi.Syntax.Abs.AbstractDispatch (fst $1) (snd $1)) }
  | '⊥' { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.AbstractTermination (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1))) }

DispatchedObject :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, Language.EO.Phi.Syntax.Abs.DispatchedObject) }
DispatchedObject
  : '{' ListBinding '}' { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.DispatchedFormation (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '⊥' { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.DispatchedTermination (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1))) }

Binding :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, Language.EO.Phi.Syntax.Abs.Binding) }
Binding
  : Attribute '↦' '∅' { (fst $1, Language.EO.Phi.Syntax.Abs.EmptyBinding (fst $1) (snd $1)) }
  | 'Δ' '⤍' Bytes { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.DeltaBinding (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1)) (snd $3)) }
  | 'λ' '⤍' { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.LambdaBinding (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1))) }

ListBinding :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, [Language.EO.Phi.Syntax.Abs.Binding]) }
ListBinding
  : {- empty -} { (Language.EO.Phi.Syntax.Abs.BNFC'NoPosition, []) }
  | Binding { (fst $1, (:[]) (snd $1)) }
  | Binding ',' ListBinding { (fst $1, (:) (snd $1) (snd $3)) }

Bindings :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, Language.EO.Phi.Syntax.Abs.Bindings) }
Bindings
  : '{' ListBinding '}' { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.Bindings (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListBindings :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, [Language.EO.Phi.Syntax.Abs.Bindings]) }
ListBindings
  : {- empty -} { (Language.EO.Phi.Syntax.Abs.BNFC'NoPosition, []) }
  | Bindings ListBindings { (fst $1, (:) (snd $1) (snd $2)) }

Dispatch :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, Language.EO.Phi.Syntax.Abs.Dispatch) }
Dispatch
  : 'Φ' '.' ListAttribute ListDisp { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.HomeDispatch (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $4)) }
  | 'ξ' '.' ListAttribute ListDisp { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.ThisDispatch (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $4)) }

Attribute :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, Language.EO.Phi.Syntax.Abs.Attribute) }
Attribute
  : 'φ' { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.Phi (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'ρ' { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.Rho (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'σ' { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.Sigma (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'ν' { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.VTX (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1))) }
  | LabelId { (fst $1, Language.EO.Phi.Syntax.Abs.Label (fst $1) (snd $1)) }
  | AlphaIndex { (fst $1, Language.EO.Phi.Syntax.Abs.Alpha (fst $1) (snd $1)) }

ListAttribute :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, [Language.EO.Phi.Syntax.Abs.Attribute]) }
ListAttribute
  : Attribute { (fst $1, (:[]) (snd $1)) }
  | Attribute '.' ListAttribute { (fst $1, (:) (snd $1) (snd $3)) }

Disp :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, Language.EO.Phi.Syntax.Abs.Disp) }
Disp
  : '{' ListBinding '}' Bindings '.' ListAttribute { (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1), Language.EO.Phi.Syntax.Abs.Disp (uncurry Language.EO.Phi.Syntax.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6)) }

ListDisp :: { (Language.EO.Phi.Syntax.Abs.BNFC'Position, [Language.EO.Phi.Syntax.Abs.Disp]) }
ListDisp
  : {- empty -} { (Language.EO.Phi.Syntax.Abs.BNFC'NoPosition, []) }
  | Disp ListDisp { (fst $1, (:) (snd $1) (snd $2)) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProgram :: [Token] -> Err Language.EO.Phi.Syntax.Abs.Program
pProgram = fmap snd . pProgram_internal

pObject :: [Token] -> Err Language.EO.Phi.Syntax.Abs.Object
pObject = fmap snd . pObject_internal

pAbstractObject :: [Token] -> Err Language.EO.Phi.Syntax.Abs.AbstractObject
pAbstractObject = fmap snd . pAbstractObject_internal

pDispatchedObject :: [Token] -> Err Language.EO.Phi.Syntax.Abs.DispatchedObject
pDispatchedObject = fmap snd . pDispatchedObject_internal

pBinding :: [Token] -> Err Language.EO.Phi.Syntax.Abs.Binding
pBinding = fmap snd . pBinding_internal

pListBinding :: [Token] -> Err [Language.EO.Phi.Syntax.Abs.Binding]
pListBinding = fmap snd . pListBinding_internal

pBindings :: [Token] -> Err Language.EO.Phi.Syntax.Abs.Bindings
pBindings = fmap snd . pBindings_internal

pListBindings :: [Token] -> Err [Language.EO.Phi.Syntax.Abs.Bindings]
pListBindings = fmap snd . pListBindings_internal

pDispatch :: [Token] -> Err Language.EO.Phi.Syntax.Abs.Dispatch
pDispatch = fmap snd . pDispatch_internal

pAttribute :: [Token] -> Err Language.EO.Phi.Syntax.Abs.Attribute
pAttribute = fmap snd . pAttribute_internal

pListAttribute :: [Token] -> Err [Language.EO.Phi.Syntax.Abs.Attribute]
pListAttribute = fmap snd . pListAttribute_internal

pDisp :: [Token] -> Err Language.EO.Phi.Syntax.Abs.Disp
pDisp = fmap snd . pDisp_internal

pListDisp :: [Token] -> Err [Language.EO.Phi.Syntax.Abs.Disp]
pListDisp = fmap snd . pListDisp_internal
}

