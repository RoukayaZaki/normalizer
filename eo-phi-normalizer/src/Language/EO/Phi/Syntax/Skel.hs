-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Language.EO.Phi.Syntax.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Language.EO.Phi.Syntax.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transBytes :: Language.EO.Phi.Syntax.Abs.Bytes -> Result
transBytes x = case x of
  Language.EO.Phi.Syntax.Abs.Bytes string -> failure x

transFunction :: Language.EO.Phi.Syntax.Abs.Function -> Result
transFunction x = case x of
  Language.EO.Phi.Syntax.Abs.Function string -> failure x

transLabelId :: Language.EO.Phi.Syntax.Abs.LabelId -> Result
transLabelId x = case x of
  Language.EO.Phi.Syntax.Abs.LabelId string -> failure x

transAlphaIndex :: Language.EO.Phi.Syntax.Abs.AlphaIndex -> Result
transAlphaIndex x = case x of
  Language.EO.Phi.Syntax.Abs.AlphaIndex string -> failure x

transProgram :: Show a => Language.EO.Phi.Syntax.Abs.Program' a -> Result
transProgram x = case x of
  Language.EO.Phi.Syntax.Abs.Program _ bindings -> failure x

transObject :: Show a => Language.EO.Phi.Syntax.Abs.Object' a -> Result
transObject x = case x of
  Language.EO.Phi.Syntax.Abs.Formation _ bindings -> failure x
  Language.EO.Phi.Syntax.Abs.Application _ abstractobject bindings bindingss -> failure x
  Language.EO.Phi.Syntax.Abs.Dispatch _ dispatch -> failure x
  Language.EO.Phi.Syntax.Abs.Termination _ -> failure x

transAbstractObject :: Show a => Language.EO.Phi.Syntax.Abs.AbstractObject' a -> Result
transAbstractObject x = case x of
  Language.EO.Phi.Syntax.Abs.AbstractFormation _ bindings -> failure x
  Language.EO.Phi.Syntax.Abs.AbstractDispatch _ dispatch -> failure x
  Language.EO.Phi.Syntax.Abs.AbstractTermination _ -> failure x

transDispatchedObject :: Show a => Language.EO.Phi.Syntax.Abs.DispatchedObject' a -> Result
transDispatchedObject x = case x of
  Language.EO.Phi.Syntax.Abs.DispatchedFormation _ bindings -> failure x
  Language.EO.Phi.Syntax.Abs.DispatchedTermination _ -> failure x

transBinding :: Show a => Language.EO.Phi.Syntax.Abs.Binding' a -> Result
transBinding x = case x of
  Language.EO.Phi.Syntax.Abs.AlphaBinding _ attribute object -> failure x
  Language.EO.Phi.Syntax.Abs.EmptyBinding _ attribute -> failure x
  Language.EO.Phi.Syntax.Abs.DeltaBinding _ bytes -> failure x
  Language.EO.Phi.Syntax.Abs.LambdaBinding _ -> failure x

transBindings :: Show a => Language.EO.Phi.Syntax.Abs.Bindings' a -> Result
transBindings x = case x of
  Language.EO.Phi.Syntax.Abs.Bindings _ bindings -> failure x

transDispatch :: Show a => Language.EO.Phi.Syntax.Abs.Dispatch' a -> Result
transDispatch x = case x of
  Language.EO.Phi.Syntax.Abs.ObjectDispatch _ dispatchedobject bindingss attributes disps -> failure x
  Language.EO.Phi.Syntax.Abs.HomeDispatch _ attributes disps -> failure x
  Language.EO.Phi.Syntax.Abs.ThisDispatch _ attributes disps -> failure x

transAttribute :: Show a => Language.EO.Phi.Syntax.Abs.Attribute' a -> Result
transAttribute x = case x of
  Language.EO.Phi.Syntax.Abs.Phi _ -> failure x
  Language.EO.Phi.Syntax.Abs.Rho _ -> failure x
  Language.EO.Phi.Syntax.Abs.Sigma _ -> failure x
  Language.EO.Phi.Syntax.Abs.VTX _ -> failure x
  Language.EO.Phi.Syntax.Abs.Label _ labelid -> failure x
  Language.EO.Phi.Syntax.Abs.Alpha _ alphaindex -> failure x

transDisp :: Show a => Language.EO.Phi.Syntax.Abs.Disp' a -> Result
transDisp x = case x of
  Language.EO.Phi.Syntax.Abs.Disp _ bindings1 bindings2 attributes -> failure x
