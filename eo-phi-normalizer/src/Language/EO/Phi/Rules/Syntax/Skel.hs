-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Language.EO.Phi.Rules.Syntax.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Language.EO.Phi.Rules.Syntax.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transBytes :: Language.EO.Phi.Rules.Syntax.Abs.Bytes -> Result
transBytes x = case x of
  Language.EO.Phi.Rules.Syntax.Abs.Bytes string -> failure x

transFunction :: Language.EO.Phi.Rules.Syntax.Abs.Function -> Result
transFunction x = case x of
  Language.EO.Phi.Rules.Syntax.Abs.Function string -> failure x

transLabelId :: Language.EO.Phi.Rules.Syntax.Abs.LabelId -> Result
transLabelId x = case x of
  Language.EO.Phi.Rules.Syntax.Abs.LabelId string -> failure x

transAlphaIndex :: Language.EO.Phi.Rules.Syntax.Abs.AlphaIndex -> Result
transAlphaIndex x = case x of
  Language.EO.Phi.Rules.Syntax.Abs.AlphaIndex string -> failure x

transMetaId :: Language.EO.Phi.Rules.Syntax.Abs.MetaId -> Result
transMetaId x = case x of
  Language.EO.Phi.Rules.Syntax.Abs.MetaId string -> failure x

transProgram :: Language.EO.Phi.Rules.Syntax.Abs.Program -> Result
transProgram x = case x of
  Language.EO.Phi.Rules.Syntax.Abs.Program bindings -> failure x

transObject :: Language.EO.Phi.Rules.Syntax.Abs.Object -> Result
transObject x = case x of
  Language.EO.Phi.Rules.Syntax.Abs.Formation bindings -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.Application object bindings -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.ObjectDispatch object attribute -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.GlobalDispatch attribute -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.ThisDispatch attribute -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.Termination -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.MetaObject metaid -> failure x

transBinding :: Language.EO.Phi.Rules.Syntax.Abs.Binding -> Result
transBinding x = case x of
  Language.EO.Phi.Rules.Syntax.Abs.AlphaBinding attribute object -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.EmptyBinding attribute -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.DeltaBinding bytes -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.LambdaBinding function -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.MetaBindings metaid -> failure x

transAttribute :: Language.EO.Phi.Rules.Syntax.Abs.Attribute -> Result
transAttribute x = case x of
  Language.EO.Phi.Rules.Syntax.Abs.Phi -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.Rho -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.Sigma -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.VTX -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.Label labelid -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.Alpha alphaindex -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.MetaAttr metaid -> failure x

transPeeledObject :: Language.EO.Phi.Rules.Syntax.Abs.PeeledObject -> Result
transPeeledObject x = case x of
  Language.EO.Phi.Rules.Syntax.Abs.PeeledObject objecthead objectactions -> failure x

transObjectHead :: Language.EO.Phi.Rules.Syntax.Abs.ObjectHead -> Result
transObjectHead x = case x of
  Language.EO.Phi.Rules.Syntax.Abs.HeadFormation bindings -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.HeadGlobal -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.HeadThis -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.HeadTermination -> failure x

transObjectAction :: Language.EO.Phi.Rules.Syntax.Abs.ObjectAction -> Result
transObjectAction x = case x of
  Language.EO.Phi.Rules.Syntax.Abs.ActionApplication bindings -> failure x
  Language.EO.Phi.Rules.Syntax.Abs.ActionDispatch attribute -> failure x
